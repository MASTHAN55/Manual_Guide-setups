                                                        [Ansible-Setup]
1. Servers creation: 
    * cerate "5-servers" (1-ansible, 2-dev_servers, 2-test_server).
    * hostnamectl set-hostname ansible-server      (give randam name for all servers)
    * passwd root  (set custom password for root user, if you can see "successfully" it's good)
 
2. Do all servers:
    * vim /etc/ssh/sshd_config  (38,61)-uncommit   (giving root_user login permmisions)
       line-38(PermitRootLogin yes)        remove #-tag
       line-61(PasswordAuthentication yes) remove #-tag

    * systemctl restart sshd          (restart sshd (mandatory)        
    * systemctl status sshd
    * hostname -i                     (showing private_id)

3. Do ansible server only:
    * amazon-linux-extras install ansible2 -y                  (install ansible)
    * yum install python3 python-pip python-dlevel -y          (install python)

4. Do ansible sever only:
    * vim /etc/ansible/hosts                                  (go to ansible inventory file (or) path)
     [dev]  (Do-12-line Ex 1:)                                (adding ip_adderses inventory file (or) path)
       private ip-adderss of "dev_server-1"
       private ip-adderss of "dev_server-2"
    [test]      
      private ip_adderss of "test_server-1"
      private ip-adderss of "test_server-2"

5. Do ansible server only: 
    * ssh-keygen ---> Do-Enter "4-times".              (generating a new key)
    * ll .ssh/                                         (showing keys (id_rsa, id_rsa.pub).
    * ssh-copy-id root@ip_address of dev-server        (copying keys from ansible-server to dev-server (mandatory).     
    * ssh "paste ip-adderss of "dev-server"            (connection complete ansible to dev)
      ["Do all ip's same for connection"].

6. connection check(Do ansible server):
    * ansible -m ping all  :  show all connections (if you can see "success" it's good)

=============================================================== [FRENTEND-CODE DEPLOYMENT] =====================================================================================================
1. Do ansible server.                                                           
vim deploy.yml
- hosts: all
  tasks:
    - name: installing httpd
      yum: name=httpd state=present

    - name: starting httpd
      service: name=httpd state=started

    - name: installing git
      yum: name=git state=present

    - name: checkout
      git:
        repo: https://github.com/MASTHAN55/netflix-clone.git
        dest: /var/www/html              (default html path)

* ansible-playbook deploy.yml

2. Do slave servers:
    * copy public ip of slave-1 & slave-2 and paste on broswer
    * if we can see netflix it's done.

=============================================== [FRENT & BACKEND-CODE SEMI AUTOMATED DEPLOYMENT] =====================================================================
1. Setup tomcat [Do ansible server]. but it will work on slave servers.
    * vim tomcat.yml         [create]
    * vim tomcat-users.xml   [create] 
    * vim context.xml        [create]
    * ansible-playbook tomcat.yml 
    * login tomcat using both slave servers.
  
2. jenkins inastallation. [Do ansible-server]
    * install jenkins [vim jenkins.sh]
    * install "ansible and stage view" pluggens.

2.1 configur ansible tool
      --> go to tools --> ansible (name= ansible, path to ansible executables directory= /usr/bin).

3. create pipeline

      pipeline {
    agent any 
    stages {
        stage ('checkout'){
            steps {
                git 'https://github.com/MDinesh28/jenkins-java-project.git'
            }
        }
        stage ('build') {
            steps {
                sh 'mvn compile'
            }
        }
        stage ('test') {
            steps {
                sh 'mvn test'
            }
        }
        stage ('artifact') {
            steps {
                sh 'mvn package'
            }
        }
    }
}

1. if we can see artifacts in local ansible server it's good.

vim deploy.yml
- hosts: all
  tasks:
    - name: deploy
      copy:
        src: /var/lib/jenkins/workspace/pipeline/target/netflix-1.2.0.war
        dest: /root/tomcat/webapps

=========================================== [FRENT & BACKEND-CODEFULLY-AUTOMATED DEPLOYMENT ] =============================================================================

1. Do all ansible setup.
1.1. Setup tomcat [Do ansible server]. but it will work on slave servers.
     * vim tomcat.yml         [create]
     * vim tomcat-users.xml   [create] 
     * vim context.xml        [create]
     * ansible-playbook tomcat.yml 
     * login tomcat using both slave servers.
  
2. jenkins inastallation. [Do ansible-server]
    * install jenkins [vim jenkins.sh]
    * install "ansible and stage view" pluggens.

2.1 configur ansible tool
      --> go to tools --> ansible (name= ansible, path to ansible executables directory= /usr/bin).

3. mv deploy.yml /etc/ansible/deploy.yml         

--> configuration --> pipeline syntax --> sample step(ansibleplaybook:invoke an ansible playbook) --> ansible tool(ansible) --> playbook file path in workspace(/etc/ansible/deploy.yml)
inventory file path on workspace(/etc/ansible/hosts) --> ssh connection credentials --> username with passwd(user name=root, password=masthan123)
host subset($server) --> disable the host ssh key check(click) --> Generate pypeline script.

[HOSTS]
--> general --> this project is parameterised --> choice parameter(name=server, choice=dev,test) --> save.

[BRANCHES]
--> configuration --> pypeline syntax --> sample step(git) --> repository url(paste jenkins-java-project URL) --> branch($branch) --> copy-link and paste on git.
--> general --> this project is parameterised(name=branch,choices=master,main,relese) --> save.

    pipeline {
    agent any 
    stages {
        stage ('checkout'){
            steps {
                git 'https://github.com/MDinesh28/jenkins-java-project.git'
            }
        }
        stage ('build') {
            steps {
                sh 'mvn compile'
            }
        }
        stage ('test') {
            steps {
                sh 'mvn test'
            }
        }
        stage ('artifact') {
            steps {
                sh 'mvn package'
            }
        }
        stage ('deploy') {
            steps {
                ansiblePlaybook credentialsId: '25a780b7-e70a-443c-a8c2-9ea95756b002', disableHostKeyChecking: true, installation: 'ansible', inventory: '/etc/ansible/hosts', limit: '$server', playbook: '/etc/ansible/deploy.yml', vaultTmpPath: ''
            }
        }
    }
}

   
    

















